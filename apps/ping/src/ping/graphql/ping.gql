scalar Longitude
scalar Latitude
scalar URL
scalar DateTime
scalar ObjectID

type Media {
  key: String!
  type: String!
}

type Ping @key(fields: "id") {
  id: ObjectID!
  title: String!
  userID: ID!
  user: User
  longitude: Longitude!
  latitude: Latitude!
  picks: [String!]!
  description: String
  url: URL
  radius: Float
  createdAt: DateTime
  media: [Media]
}

extend type User @key(fields: "id") {
  id: ObjectID! @external
  pings: [Ping]
}

input CreatePingInput {
  userID: ObjectID!
  title: String!
  picks: [String!]!
  longitude: Longitude!
  latitude: Latitude!
  description: String
  url: URL
  radius: Float
}

input UPingInput {
  title: String
  picks: [String!]
  longitude: Longitude
  latitude: Latitude
  description: String
  url: URL
  radius: Float
  media: [MediaInput]
}

input MediaInput {
  key: String!
  type: String!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String!
}

type PingEdge {
  cursor: String!
  node: Ping!
}

type PingConnection {
  edges: [PingEdge!]!
  pageInfo: PageInfo!
}

extend type Query {
  getPing(id: ObjectID!): Ping!
  getAllPing(first: Int!, after: String): PingConnection!
}

extend type Mutation {
  createPing(payload: CreatePingInput!): Ping!
  updatePing(id: ObjectID!, payload: UPingInput!): Ping!
}
