scalar DateTime
scalar EmailAddress
scalar ObjectID

type Name {
  firstName: String!
  middleName: String
  lastName: String!
}

type User @key(fields: "id") {
  id: ObjectID!
  email: EmailAddress!
  username: String!
  name: Name
  picture: String
  createdAt: DateTime
  picks: [String]
  pings: [Ping]
}

extend type Ping @key(fields: "id") {
  id: ObjectID! @external
  user: User
}

input CreateUserInput {
  username: String!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  middleName: String
  picture: String
  picks: [String]!
  latitude: Float
  longitude: Float
}

input UpdateUserInput {
  id: ObjectID!
  usename: String
  email: EmailAddress
  firstName: String
  lastName: String
  middleName: String
  picks: [String]
}

extend type Query {
  getUser(id: ObjectID!): User!
  getUserByEmail(email: EmailAddress!): User
  isUsernameAvailable(username: String!): Boolean!
}

extend type Mutation {
  createUser(payload: CreateUserInput!): User!
  updateUser(payload: UpdateUserInput!): User!
  removeUser(id: ObjectID!): User
}

# type Subscription {
#   watchUsernameAvailability(username: String!): Boolean!
# }
