scalar DateTime
scalar EmailAddress
scalar ObjectID

enum Role {
  ADMIN
  USER
  ACTIVITY_OWNER
  FORUM_MODERATOR
}

type Name {
  firstName: String!
  middleName: String
  lastName: String!
}

type User {
  id: ObjectID!
  email: EmailAddress!
  username: String!
  role: Role!
  name: Name
  picture: String
  createdAt: DateTime
  updatedAt: DateTime
  picks: [String]
  isRegistered: Boolean!
}

input CreateUserInput {
  username: String!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  middleName: String
  role: Role!
  picture: String
  picks: [String]!
}

input UpdateUserInput {
  id: ObjectID!
  usename: String
  email: EmailAddress
  firstName: String
  lastName: String
  middleName: String
  picks: [String]
}

type Query {
  users: [User]!
  getUserByID(id: ObjectID!): User
  getUserByEmail(email: EmailAddress!): User
  isUsernameAvailable(username: String!): Boolean!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: ObjectID!): User
}

# type Subscription {
#   watchUsernameAvailability(username: String!): Boolean!
# }
