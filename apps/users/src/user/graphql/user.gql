#import "../../../../../libs/utils/errors.gql"

scalar DateTime
scalar EmailAddress
scalar ObjectID

type Name {
  firstName: String!
  middleName: String
  lastName: String!
}

"""
Represents a user in the system.
"""
type User @key(fields: "id") {
  id: ObjectID! # The unique identifier of the user.
  email: EmailAddress! # The email address of the user.
  username: String! # The username of the user.
  name: Name # The name of the user.
  picture: String # The profile picture of the user.
  createdAt: DateTime # The date and time when the user was created.
  picks: [String!]! # The list of picks made by the user.
  pings: [Ping] # The list of pings received by the user.
  activityCount: Int # The number of activities performed by the user.
  devices: [String!] # The list of devices associated with the user.
}

extend type Ping @key(fields: "id") {
  id: ObjectID! @external
  user: User
}

input CreateUserInput {
  username: String!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  middleName: String
  picture: String
  picks: [String!]!
  latitude: Float
  longitude: Float
  device: String!
}

input UpdateUserInput {
  id: ObjectID!
  username: String
  email: EmailAddress
  firstName: String
  lastName: String
  middleName: String
  picks: [String!]
  picture: String
  devices: [String!]
  latitude: Float
  longitude: Float
}

union UserPayload = User | NotFoundError | UnauthorizedError
# | ForbiddenError
# | InternalServerError
# | UnknownError

extend type Query {
  getUser: UserPayload!
  getUserById(id: ObjectID!): User!
  isUsernameAvailable(username: String!): Boolean!
}

extend type Mutation {
  createUser(payload: CreateUserInput!): User!
  updateUser(payload: UpdateUserInput!): User!
  removeUser(id: ObjectID!): User
}
