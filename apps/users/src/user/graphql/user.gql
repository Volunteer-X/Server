#import "../../../../../libs/common/src/graphql/error.gql"

scalar DateTime
scalar EmailAddress
scalar ObjectID
scalar Longitude
scalar Latitude

"Represents a name."
type Name {
  # The first name of the user.
  firstName: String!
  # The middle name of the user.
  middleName: String
  # The last name of the user.
  lastName: String!
}

"Represents a user in the system."
type User @key(fields: "id") {
  "The unique identifier of the user."
  id: ObjectID!
  "The email address of the user."
  email: EmailAddress!
  "The username of the user."
  username: String!
  "The name of the user."
  name: Name
  "The profile picture of the user."
  picture: String
  "The date and time when the user was created."
  createdAt: DateTime
  "The list of picks made by the user."
  picks: [String!]!
  "The list of pings received by the user."
  pings: [Ping]
  "The number of activities joined by the user."
  activityCount: Int
  "The list of devices associated with the user."
  devices: [String!]
}

#Represents a ping sent to a user.
extend type Ping @key(fields: "id") {
  id: ObjectID! @external
  user: User
}

input CreateUserInput {
  username: String!
  email: EmailAddress!
  firstName: String!
  lastName: String!
  middleName: String
  picture: String
  picks: [String!]!
  latitude: Latitude
  longitude: Longitude
  device: String!
}

input UpdateUserInput {
  id: ObjectID!
  username: String
  email: EmailAddress
  firstName: String
  lastName: String
  middleName: String
  picks: [String!]
  picture: String
  devices: [String!]
  latitude: Latitude
  longitude: Longitude
}

"The payload for the user."
union UserPayload =
  | User
  | NotFoundError
  | UnauthorizedError
  | UnknownError
  | InternalServerError
# | ForbiddenError

# The queries for the user.
extend type Query {
  "Get the current user. Requires authentication."
  user: UserPayload!
  "Get a user by id."
  userById(id: ObjectID!): User!
  "Check if a username is available."
  isUsernameAvailable(username: String!): Boolean!
}

# The mutations for the user.
extend type Mutation {
  "Create a new user. Requires authentication."
  createUser(payload: CreateUserInput!): User!
  "Update an existing user. Requires authentication."
  updateUser(payload: UpdateUserInput!): User!
  "Remove a user from the system. Requires authentication."
  removeUser(id: ObjectID!): User
}
